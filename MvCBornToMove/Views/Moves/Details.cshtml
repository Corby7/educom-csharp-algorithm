@model MvCBornToMove.Models.MoveRating

@{
    ViewData["Title"] = "Exercise Info";
}

<h1>@Html.DisplayFor(model => model.Move.Name)</h1>

<div>
    <h5 class="fw-light">Exercise Information</h5>
    <hr />

    <dl class="row">
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Move.Description)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Move.Description)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Move.SweatRate)
        </dt>
        <dd class="col-sm-10 pt-1">
            <div id="sweatrate-bar" class="progress" role="progressbar" aria-label="Basic example" aria-valuenow="0" aria-valuemin="0" aria-valuemax="5" style="width: 25%">
                <div id="sweatrate-bar-inner" class="progress-bar" style="">@Model.Move.SweatRate</div>
            </div>
        </dd>
    </dl>
    <hr />

    <h6 class ="fw-light">Community Ratings</h6>
    <dl class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Move.AverageRatings.AverageRating)
        </dt>
        <dd class="col-sm-10 pt-1">
            <div id="rating-bar" class="progress" role="progressbar" aria-label="Basic example" aria-valuenow="0" aria-valuemin="0" aria-valuemax="5" style="width: 25%">
                <div id="rating-bar-inner" class="progress-bar" style="">
                    @((Model.Move?.AverageRatings?.AverageRating != null) ? Math.Round(Model.Move.AverageRatings.AverageRating, 1).ToString() : "")
                </div>
            </div>
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Move.AverageRatings.AverageIntensity)
        </dt>
        <dd class="col-sm-10 pt-1">
            <div id="intensity-bar" class="progress" role="progressbar" aria-label="Basic example" aria-valuenow="0" aria-valuemin="0" aria-valuemax="5" style="width: 25%">
                <div id="intensity-bar-inner" class="progress-bar" style="">
                    @((Model.Move?.AverageRatings?.AverageIntensity != null) ? Math.Round(Model.Move.AverageRatings.AverageIntensity, 1).ToString() : "")
                </div>
            </div>
        </dd>

    </dl>
@* 
    <div id="dynamic-progress" class="progress" role="progressbar" aria-label="Basic example" aria-valuenow="0" aria-valuemin="0" aria-valuemax="5" style="width: 25%">
        <div id="dynamic-progress-bar" class="progress-bar" style="">@Model.AverageIntensity</div>
    </div> *@

    <script>
        // Function to update the progress bar dynamically
        function updateProgressBar(divId, value) {
            // Ensure the value is within the valid range (0 to 5)
            value = Math.min(5, Math.max(0, value));

            // Calculate the percentage width
            var percentageWidth = (value / 5) * 100;

            // Update the progress bar and its value
            document.getElementById(divId + '-bar').setAttribute('aria-valuenow', value);
            document.getElementById(divId + '-bar-inner').style.width = percentageWidth + '%';
        }

        // Example usage: Update the progress bar to a new value (e.g., 4)
        @if (Model.Move?.AverageRatings != null)
        {
            <text>
                updateProgressBar('rating', @Model.Move.AverageRatings.AverageRating);
                updateProgressBar('intensity', @Model.Move.AverageRatings.AverageIntensity);
            </text>
        }

        updateProgressBar('sweatrate', @Model.Move.SweatRate);
    </script>


    <hr />

    <h6 class="fw-light">Your Rating</h6>
    <form asp-action="Details">
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        <input type="hidden" asp-for="@Model.Move.Id" name="Move.Id" />
        <input type="hidden" asp-for="@Model.Move.Name" name="Move.Name" />
        <input type="hidden" asp-for="@Model.Move.Description" name="Move.Description" />
        <input type="hidden" asp-for="@Model.Move.SweatRate" name="Move.SweatRate" />
        <input type="hidden" asp-for="@Model.Move.AverageRatings.AverageRating" name="Move.AverageRatings.AverageRating" />
        <input type="hidden" asp-for="@Model.Move.AverageRatings.AverageIntensity" name="Move.AverageRatings.AverageIntensity" />

        <label for="reviewRating" class="form-label">How much did you like this exercise: <span id="selectedRating">0</span>/5</label>
        <br />
        <input type="range" class="form-range" min="0" max="5" step="0.5" id="reviewRating" name="Rating" value="0" style="width: 25%;">

        <script>
            // JavaScript to handle the change event and update the displayed value
            document.getElementById("reviewRating").addEventListener("input", function() {
              var inputValue = this.value;
              document.getElementById("selectedRating").innerText = inputValue;
            });
        </script>

        <br />
        <label for="reviewIntensity" class="form-label">How intense was this exercise: <span id="selectedIntensity">0</span>/5</label>
        <br />
        <input type="range" class="form-range" min="0" max="5" step="0.5" id="reviewIntensity" name="Intensity" value="0" style="width: 25%;">

        <script>
            // JavaScript to handle the change event and update the displayed intensity value
            document.getElementById("reviewIntensity").addEventListener("input", function () {
                var intensityValue = this.value;
                document.getElementById("selectedIntensity").innerText = intensityValue;
            });
        </script>

        <div class="form-group">
            <input type="submit" value="Submit" class="btn btn-primary" />
        </div>
    </form>

</div>
<div>
    <a asp-action="Edit" asp-route-id="@Model?.Move.Id">Edit</a> |
    <a asp-action="Index">Back to List</a>
</div>
